name: DecVCPlat Code Coverage Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-coverage:
    name: Backend .NET Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore src/DecVCPlat.sln

    - name: Build solution
      run: dotnet build src/DecVCPlat.sln --no-restore --configuration Release

    - name: Run backend tests with coverage
      run: |
        dotnet test tests/DecVCPlat.Tests.sln \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/backend \
          --logger trx \
          --logger "console;verbosity=detailed" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate backend coverage report
      run: |
        reportgenerator \
          "-reports:./coverage/backend/**/coverage.opencover.xml" \
          "-targetdir:./coverage/backend/html" \
          "-reporttypes:Html;Cobertura;lcov;SonarQube" \
          "-title:DecVCPlat Backend Coverage Report" \
          "-tag:backend"

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/backend/Cobertura.xml
        flags: backend
        name: DecVCPlat Backend Coverage
        fail_ci_if_error: true

    - name: Comment backend coverage on PR
      uses: 5monkeys/cobertura-action@master
      if: github.event_name == 'pull_request'
      with:
        path: ./coverage/backend/Cobertura.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 80
        fail_below_threshold: true
        show_missing: true
        show_line: true
        show_branch: true

  frontend-coverage:
    name: Frontend React Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/Frontend/DecVCPlat.Web/package-lock.json

    - name: Install frontend dependencies
      working-directory: src/Frontend/DecVCPlat.Web
      run: npm ci

    - name: Run frontend tests with coverage
      working-directory: src/Frontend/DecVCPlat.Web
      run: |
        npm run test -- --coverage --watchAll=false --ci --testResultsProcessor=jest-junit
      env:
        CI: true

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./src/Frontend/DecVCPlat.Web/coverage/lcov.info
        flags: frontend
        name: DecVCPlat Frontend Coverage
        fail_ci_if_error: true

    - name: Comment frontend coverage on PR
      uses: romeovs/lcov-reporter-action@v0.3.1
      if: github.event_name == 'pull_request'
      with:
        lcov-file: ./src/Frontend/DecVCPlat.Web/coverage/lcov.info
        github-token: ${{ secrets.GITHUB_TOKEN }}
        delete-old-comments: true

    - name: Upload frontend test results
      uses: dorny/test-reporter@v2
      if: always()
      with:
        name: Frontend Jest Tests
        path: src/Frontend/DecVCPlat.Web/test-results/junit.xml
        reporter: jest-junit

  e2e-coverage:
    name: End-to-End Test Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/DecVCPlat.E2E/package-lock.json

    - name: Install E2E dependencies
      working-directory: tests/DecVCPlat.E2E
      run: npm ci

    - name: Install Playwright Browsers
      working-directory: tests/DecVCPlat.E2E
      run: npx playwright install --with-deps

    - name: Run E2E tests with coverage
      working-directory: tests/DecVCPlat.E2E
      run: |
        npx playwright test --reporter=html,junit
      env:
        CI: true

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-report
        path: tests/DecVCPlat.E2E/playwright-report/
        retention-days: 30

    - name: Upload E2E test results to GitHub
      uses: dorny/test-reporter@v2
      if: always()
      with:
        name: E2E Playwright Tests
        path: tests/DecVCPlat.E2E/test-results/junit.xml
        reporter: jest-junit

  security-coverage:
    name: Security Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build for CodeQL
      run: dotnet build src/DecVCPlat.sln --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Snyk Security Scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=src/DecVCPlat.sln --severity-threshold=medium

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'DecVCPlat'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Setup Node.js for frontend analysis
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install SonarJS
      run: npm install -g sonarjs

    - name: Begin SonarCloud scan
      run: |
        dotnet sonarscanner begin \
          /k:"DecVCPlat" \
          /o:"decvcplat-org" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="./coverage/backend/**/coverage.opencover.xml" \
          /d:sonar.javascript.lcov.reportPaths="./src/Frontend/DecVCPlat.Web/coverage/lcov.info" \
          /d:sonar.coverage.exclusions="**/*Test*.cs,**/test/**/*,**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx" \
          /d:sonar.exclusions="**/node_modules/**,**/coverage/**,**/bin/**,**/obj/**"

    - name: Build and analyze
      run: |
        dotnet restore src/DecVCPlat.sln
        dotnet build src/DecVCPlat.sln --no-restore --configuration Release
        
        # Run backend tests with coverage
        dotnet test tests/DecVCPlat.Tests.sln \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/backend \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

        # Install and run frontend tests
        cd src/Frontend/DecVCPlat.Web
        npm ci
        npm run test -- --coverage --watchAll=false --ci
        cd ../../..

    - name: End SonarCloud scan
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: [backend-coverage, frontend-coverage, e2e-coverage]
    
    steps:
    - uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        path: ./coverage-reports

    - name: Generate combined coverage report
      run: |
        echo "# DecVCPlat Code Coverage Summary" > coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Backend Coverage" >> coverage-summary.md
        echo "- **Lines:** $(grep -o 'line-rate="[^"]*"' ./coverage-reports/backend/Cobertura.xml | head -1 | cut -d'"' -f2 | awk '{printf "%.1f%%", $1*100}')" >> coverage-summary.md
        echo "- **Branches:** $(grep -o 'branch-rate="[^"]*"' ./coverage-reports/backend/Cobertura.xml | head -1 | cut -d'"' -f2 | awk '{printf "%.1f%%", $1*100}')" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Frontend Coverage" >> coverage-summary.md
        echo "- **Statements:** $(node -e "const fs=require('fs'); const coverage=JSON.parse(fs.readFileSync('./coverage-reports/frontend/coverage-summary.json')); console.log(coverage.total.statements.pct + '%');")" >> coverage-summary.md
        echo "- **Functions:** $(node -e "const fs=require('fs'); const coverage=JSON.parse(fs.readFileSync('./coverage-reports/frontend/coverage-summary.json')); console.log(coverage.total.functions.pct + '%');")" >> coverage-summary.md
        echo "- **Lines:** $(node -e "const fs=require('fs'); const coverage=JSON.parse(fs.readFileSync('./coverage-reports/frontend/coverage-summary.json')); console.log(coverage.total.lines.pct + '%');")" >> coverage-summary.md
        echo "- **Branches:** $(node -e "const fs=require('fs'); const coverage=JSON.parse(fs.readFileSync('./coverage-reports/frontend/coverage-summary.json')); console.log(coverage.total.branches.pct + '%');")" >> coverage-summary.md

    - name: Comment coverage summary on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverageSummary = fs.readFileSync('coverage-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageSummary
          });

    - name: Check coverage thresholds
      run: |
        # Check backend coverage threshold (80%)
        BACKEND_COVERAGE=$(grep -o 'line-rate="[^"]*"' ./coverage-reports/backend/Cobertura.xml | head -1 | cut -d'"' -f2 | awk '{print $1*100}')
        if (( $(echo "$BACKEND_COVERAGE < 80" | bc -l) )); then
          echo "Backend coverage ($BACKEND_COVERAGE%) is below 80% threshold"
          exit 1
        fi
        
        # Check frontend coverage threshold (80%)
        FRONTEND_COVERAGE=$(node -e "const fs=require('fs'); const coverage=JSON.parse(fs.readFileSync('./coverage-reports/frontend/coverage-summary.json')); console.log(coverage.total.lines.pct);")
        if (( $(echo "$FRONTEND_COVERAGE < 80" | bc -l) )); then
          echo "Frontend coverage ($FRONTEND_COVERAGE%) is below 80% threshold"
          exit 1
        fi
        
        echo "All coverage thresholds met! ✅"
